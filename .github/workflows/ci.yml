name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [Debug, Release]
        compiler: [gcc, clang]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
        sudo apt-get install -y libvulkan-dev vulkan-validationlayers
        sudo apt-get install -y libgtest-dev
        sudo apt-get install -y clang-tidy clang-format
        sudo apt-get install -y lcov
        sudo apt-get install -y doxygen graphviz
    
    - name: Configure CMake
      run: |
        cmake -B build -S . \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler }} \
          -DENABLE_TESTS=ON \
          -DENABLE_COVERAGE=${{ matrix.build_type == 'Debug' }}
    
    - name: Build
      run: |
        cmake --build build --config ${{ matrix.build_type }} -j$(nproc)
    
    - name: Run tests
      run: |
        cd build && ctest --output-on-failure
    
    - name: Generate coverage report
      if: matrix.build_type == 'Debug'
      run: |
        lcov --capture --directory build --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --list coverage.info
        genhtml coverage.info --output-directory coverage
    
    - name: Upload coverage report
      if: matrix.build_type == 'Debug'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage
    
    - name: Run clang-tidy
      run: |
        cd build
        run-clang-tidy -j$(nproc) -checks=*,-fuchsia-*,-google-*,-zircon-*,-abseil-*,-modernize-use-trailing-return-type
    
    - name: Generate documentation
      run: |
        doxygen Doxyfile
    
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/html

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run cppcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck
        cppcheck --enable=all --suppress=missingIncludeSystem src/
    
    - name: Check formatting
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format
        find src/ -name "*.cpp" -o -name "*.h" | xargs clang-format --dry-run --Werror

  docker-build:
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/vulkan-engine:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/vulkan-engine:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/vulkan-engine:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/vulkan-engine:buildcache,mode=max

  release:
    needs: [build-and-test, code-quality, docker-build]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build/vulkan-engine
          docs/html/**/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 